@*
// Copyright (c) 2010-2013 SharpDoc - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.       
// -------------------------------------------------------------------------------
// Override this template to modify the global behavior for each Dump functions
// -------------------------------------------------------------------------------
*@
@model SharpDoc.TemplateContext
@using SharpDoc;
@using SharpDoc.Model
@using System.Text.RegularExpressions
@functions {
    public string LinkToUrl(LinkDescriptor link)
    {
        string url = null;
        switch (link.Type) {
            case LinkType.None:
                return Escape(link.Name);
            case LinkType.Self:
                return string.Format("<strong>{0}</strong>", Escape(link.Name));
            case LinkType.Local:
                url = string.Format("{0}{1}{2}", Param.RootLink, link.LocalReference.PageId, Param.FileExt);
                break;
            case LinkType.External:
                return string.Format("<a target=\"{0}\" href=\"{1}\" {2}>{3}</a>", 
                    Param.ExternalLinkTarget ?? "_blank",
                    link.Location, 
                    link.Attributes ?? "", 
                    Escape(link.Name));
        }
        if (url == null)
            return Escape(link.Name);

        return string.Format("<a target=\"mainFrame\" onclick=\"hightLightTopic('{3}');\" href=\"{0}\" {1}>{2}</a>", url, link.Attributes ?? "", Escape(link.Name), link.PageId);
    }
}

@{    
    Model.LinkResolver = LinkToUrl;
}
