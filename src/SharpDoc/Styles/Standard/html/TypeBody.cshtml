@*
// Copyright (c) 2010-2013 SharpDoc - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.       
// -------------------------------------------------------------------------------
// Override this template to modify the generated html body for a Type
// -------------------------------------------------------------------------------
*@
@using SharpDoc.Model
@using System.Text;
@model SharpDoc.TemplateContext
@Import("Section")
@Import("WebDocSection")
@Import("OtherSection")
@Import("SeeAlso")
@Import("Version")
@Import("TypeBodyMembersHeader")
@{    
    // Initialize complex inheritance flag 
    // Check if this type has a complex inheritance   
    HasComplexInheritance = (Model.Type.FlattenedHierarchy.Count - Model.Type.Bases.Count) > 4;
}
@functions {

    /// <summary>
    /// Value indicating if the current type has a complex inheritance
    /// </summary>
    public bool HasComplexInheritance {get;set;}

    /// <summary>
    /// Write inheritance hierarchy.
    /// </summary>
    /// <param name="full">true to write the full inheritance, false to stop just after the self type</param>
    /// <returns></returns>
    protected object WriteInheritance(bool full) {
        var builder = new StringBuilder();
        const string levelText = "&nbsp;&nbsp;&nbsp;";
        int lastLevel = 0;
        for(int i = 0; i < (full?Model.Type.FlattenedHierarchy.Count:Model.Type.Bases.Count+1); i++) {
            var item = Model.Type.FlattenedHierarchy[i];
            lastLevel = item.Item1;
            builder.Append(string.Concat(Enumerable.Repeat(levelText, lastLevel)));
            if (item.Item2.Id == Model.Type.Id)
            {
                builder.Append("<strong>").Append(Escape(item.Item2.FullName)).Append("</strong><br/>");
            }
            else
            {
                builder.Append(ToUrl(item.Item2, item.Item2.FullName) + "<br />");
            }
        }
        if (HasComplexInheritance && !full) {
            builder.Append(string.Concat(Enumerable.Repeat(levelText, lastLevel)));
            builder.Append(@"<a href=""#section_full_inheritance"">More...</a><br/>");
        }
        return builder;
    }
}
@{
    var self = Model.Type;
}
<div class="content-title">
	<h1 id="#top" class="content-title">@self.PageTitle</h1>
</div>
<div style="clear: both;"></div>
        
<div class="summary">@Raw(TagExpand(self.Description))</div>

@if (self is NClass)
{
    @Helpers.Section.Dump("section_partial_inheritance", "Inheritance Hierarchy", WriteInheritance(!HasComplexInheritance).ToString())
}
<br/>
<div class="origin">
<strong>Assembly: </strong>@Model.Assembly.FullName (@Model.Assembly.FileName @Model.Assembly.Version)<br />
<strong>Namespace: </strong>@Raw(ToUrl(Model.Namespace))<br />
@Helpers.TypeBodyMembersHeader.Dump(self)
</div>
@if (self is NType)
{
    @Helpers.Section.DumpSyntax(self)
}

<div class="members">
@if (!(self is NDelegate))
{
    if (self.HasConstructors)
    {
        @Helpers.Section.Dump("Constructors", self.Constructors, true)
    }

    if (self.HasFields)
    {
        @Helpers.Section.Dump("Fields", self.AllFields, true, self)
    }

    if (self.HasProperties)
    {
        @Helpers.Section.Dump("Properties", self.AllProperties, true, self)
    }

    if (self.HasMethods)
    {
        @Helpers.Section.Dump("Methods", self.AllMethods, true, self)
    }

    if (self.HasExtensionMethods)
    {
        @Helpers.Section.Dump("Extension Methods", self.ExtensionMethods, true, self)
    }

    if (self.HasEvents)
    {
        @Helpers.Section.Dump("Events", self.AllEvents, true, self)
    }

    if (self.HasOperators)
    {
        @Helpers.Section.Dump("Operators", self.Operators, true, self)
    }
}
@if (!string.IsNullOrEmpty(self.Remarks))
{
    @Helpers.Section.Dump("Remarks", TagExpand(self.Remarks))
}

@Helpers.WebDocSection.Dump(self)

@Helpers.OtherSection.Dump(self)

@if (self is NClass && HasComplexInheritance)
{
    @Helpers.Section.Dump("section_full_inheritance", "Inheritance Hierarchy", WriteInheritance(true).ToString())
}
	
@Helpers.Version.Dump(self)

@Helpers.SeeAlso.Dump(self)
</div>

